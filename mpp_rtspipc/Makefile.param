# Makefile.param 
# Only global variable should be defined here.
# All the variables must be used as "export" and "?=".
# Otherwise, there will be some errors, when Makefile.param is nested.

# Use this file as the following sample
# ifeq ($(PARAM_FILE), )
#     PARAM_FILE:=../Makefile.param
#     include $(PARAM_FILE)
# endif

# Define the default OS link directory.
export HIWORK_PATH?=./hiwork

export ARCH=arm
export MPP_BUILD=n

#Change ISP parameter config mode 
#Default "y" is ini config mode, else "n" source code config mode
export ISP_INI_CONFIG=n

# use HIARCH indicate chip, use libc to choose cross compiler.
export HIARCH?=hi3518e
export LIBC?=uclibc

# Whether support the debug information. HI_DEBUG or HI_RELEASE
export HIDBG?=HI_RELEASE

# cpu type single/big-little
export CPU_TYPE?=

# Whether open -g 
export HIGDB?=n

# FPGA board or not
export FPGA?=n

export HICHIP?=0x3518E200
export ARCH_DIR?=hi3518e

DBG_FLAG=0

export PRODUCT?=IPC

# use C01 to indicate uclibc, C02 to  indicate glibc, C00 to indicate FPGA.
export CVER?=.C$(DBG_FLAG)1

export HI_FPGA:=HI_XXXX
export EXTDRV:=extdrv/$(HIARCH)

# Get the local SDK_ROOT path or RELEASE_ROOT path by PARAM_FILE.
# PARAM_FILE is configed at Makefile before include this file
export PARAM_FILE
export SDK_PATH?=$(shell cd $(shell pwd)/`dirname $(PARAM_FILE)`/..; pwd)
export MPP_PATH?=$(shell cd $(shell pwd)/`dirname $(PARAM_FILE)`; pwd)
export SHELF_ROOT?=$(MPP_PATH)/code/shelf
export DRV_ROOT?=$(SDK_PATH)/drv

export KERNEL_NAME="linux-3.4.y"

# Allocated the linux position
export LINUX_ROOT?=$(SDK_PATH)/osdrv/opensource/kernel/$(KERNEL_NAME)

# Define cross compiler
export CROSS_COMPILE?=arm-hisiv300-linux-
export CROSS?=arm-hisiv300-linux-

export CC:=$(CROSS)gcc
export AR:=$(CROSS)ar


export MPP_CFLAGS:= -Wall
export DRV_CFLAGS:= 

ifeq ($(HIGDB), y)
	MPP_CFLAGS += -g
endif

#### MPP_BUILD=n ######
export REL_DIR=$(SDK_PATH)/mpp_rtspipc
	
EXTDRV=extdrv
export SAMPLE_DIR=$(REL_DIR)/sample

export REL_INC := $(REL_DIR)/include
export REL_LIB := $(REL_DIR)/lib
export REL_KO  := $(REL_DIR)/ko

# Define the param of audio 
export AUDIO_PATH?=$(SDK_PATH)/mpp/component/audio/lib/$(CROSS)
export AUDIO_LIBA ?= $(REL_LIB)/libVoiceEngine.a\
 	             $(REL_LIB)/libupvqe.a\
 	             				 $(REL_LIB)/libdnvqe.a
export AUDIO_LIBS ?= $(REL_LIB)/libVoiceEngine.so\
					 	             $(REL_LIB)/libupvqe.so\
									 				 $(REL_LIB)/libdnvqe.so
export JPEGD_PATH?=$(SDK_PATH)/mpp/component/jpegd
export JPEGD_LIBA:=$(REL_LIB)/libjpeg.a
export HIMEM_LIBA := $(REL_LIB)/libmem.a

###############################################################################
# LIB GLOBAL CFLAGS
ifeq ($(HIARCH),hi3518e)
	export LIBS_CFLAGS    =
	export LIBS_LD_CFLAGS =
endif

# common CFLAGS
LIBS_CFLAGS +=  -mno-unaligned-access -fno-aggressive-loop-optimizations -ldl
LIBS_LD_CFLAGS += -mno-unaligned-access -fno-aggressive-loop-optimizations -ldl

###############################################################################

#********************* Macro for version management***************************** 
VER_X ?= 1
VER_Y ?= 0
VER_Z ?= 0
VER_P ?= 0
VER_B ?= 10
MPP_CFLAGS += -DVER_X=$(VER_X) -DVER_Y=$(VER_Y) -DVER_Z=$(VER_Z) -DVER_P=$(VER_P) -DVER_B=$(VER_B)
#******************************************************************************* 

# include the config file of platform
-include $(SDK_PATH)/mpp/configs/config.mk

export CONFIG_JPEGEDCF=y

ifeq ($(CONFIG_JPEGEDCF), y)
	MPP_CFLAGS += -D ENABLE_JPEGEDCF 
endif	

ifeq ($(CONFIG_LOWDELAY), y)
         MPP_CFLAGS += -DENABLE_LOWDELAY
endif
